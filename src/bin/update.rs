use std::os;
use docopt;

use cargo::ops;
use cargo::core::MultiShell;
use cargo::util::{CliResult, CliError};
use cargo::util::important_paths::find_root_manifest_for_cwd;

docopt!(Options, "
Update dependencies as recorded in the local lock file.

Usage:
    cargo update [options] [<name>]

Options:
    -h, --help              Print this message
    --manifest-path PATH    Path to the manifest to compile
    -v, --verbose           Use verbose output

This command requires that a `Cargo.lock` already exists as generated by
`cargo build` or related commands.

If <name> is specified, then a conservative update of the lockfile will be
performed. This means that only the dependency <name> (and all of its transitive
dependencies) will be updated. All other dependencies will remain locked at
their currently recorded versions.

If <name> is not specified, then all dependencies will be re-resolved and
updated.
",  flag_manifest_path: Option<String>, arg_name: Option<String>)

pub fn execute(options: Options, shell: &mut MultiShell) -> CliResult<Option<()>> {
    debug!("executing; cmd=cargo-update; args={}", os::args());
    shell.set_verbose(options.flag_verbose);
    let root = try!(find_root_manifest_for_cwd(options.flag_manifest_path));

    ops::update_lockfile(&root, shell, options.arg_name)
        .map(|_| None).map_err(|err| CliError::from_boxed(err, 101))
}

