.TH CARGO "1" "November 2015" "cargo 0.9.0" "User Commands"
.SH NAME
cargo \- The Rust package manager
.SH SYNOPSIS
.B cargo
<COMMAND> [<ARGS>...]

.B cargo
[\fIOPTIONS\fR]

.SH DESCRIPTION
This program is a package manager for the Rust language, available at
<\fBhttp://rust-lang.org\fR>.

.SH OPTIONS

.TP
\fB\-h, \-\-help\fR
Display a help message
.TP
\fB\-V, \-\-version\fR
Print version information and exit
.TP
\fB\-\-list\fR
List all available cargo commands
.TP
\fB\-v, \-\-verbose\fR
Use verbose output
.TP
\fB\-\-color\fR
Configure coloring of output

.SH COMMANDS

To get extended information about commands, run 'cargo help <command>'

.SS build
Compile the current project
.TP
\fB\-h, \-\-help\fR
Print this message
.TP
\fB\-p\fR \fISPEC\fR, \fB\-\-package\fR \fISPEC ...\fR
Package to build
.TP
\fB\-j\fR \fIN\fR, \fB\-\-jobs\fR \fIN\fR
The number of jobs to run in parallel
.TP
\fB\-\-lib\fR
Build only this package's library
.TP
\fB\-\-bin\fR \fINAME\fR
Build only the specified binary
.TP
\fB\-\-example\fR \fINAME\fR
Build only the specified example
.TP
\fB\-\-test\fR \fINAME\fR
Build only the specified test target
.TP
\fB\-\-bench\fR \fINAME\fR
Build only the specified benchmark target
.TP
\fB\-\-release\fR
Build artifacts in release mode, with optimizations
.TP
\fB\-\-features\fR \fIFEATURES\fR
Space-separated list of features to also build
.TP
\fB\-\-no-default-features\fR
Do not build the `default` feature
.TP
\fB\-\-target\fR \fITRIPLE\fR
Build for the target triple
.TP
\fB\-\-manifest-path\fR \fIPATH\fR
Path to the manifest to compile
.TP
\fB\-v, \-\-verbose\fR
Use verbose output
.TP
\fB\-q, \-\-quiet\fR
No output printed to stdout
.TP
\fB\-\-color\fR \fIWHEN\fR
Coloring: auto, always, never

.PP
If the \fB--package\fR argument is given, then \fISPEC\fR is a package id
specification which indicates which package should be built. If it is not given,
then the current package is built. For more information on \fISPEC\fR and its
format, see the `cargo help pkgid` command.

Compilation can be configured via the use of profiles which are configured in
the manifest. The default profile for this command is `dev`, but passing the
\fB--release\fR flag will use the `release` profile instead.



.SS clean
Remove the target directory with build output
.SS doc
Build this project's and its dependencies' documentation
.SS init
Create a new cargo project in the current directory
.SS install
Install a Rust binary
.SS new
Create a new cargo project
.SS run
Build and execute src/main.rs
.SS test
Run the tests for the package
.SS bench
Run the benchmarks for the package
.SS update
Update dependencies in Cargo.lock
.SS package
Generate a source tarball for the current package
.SS publish
Package and upload this project to the registry
.SS uninstall
Remove a Rust binary
.SS search
Search registry for crates
.SS version
Print cargo's version and exit

.SH FILES

.TP
~/.cargo
Directory in which Cargo stores repository data. Cargo can be instructed to use
a .cargo subdirectory in a different location by setting the CARGO_HOME
environment variable.

.SH "EXAMPLES"
Build a local package and all of its dependencies
    $ cargo build

Build a package with optimizations
    $ cargo build --release

Run tests for a cross-compiled target
    $ cargo test --target i686-unknown-linux-gnu

Create a new project that builds an executable
    $ cargo new --init foobar

Create a project in the current directory
    $ mkdir foo && cd foo
    $ cargo init .

Learn about a command's options and usage
    $ cargo help clean

.SH "SEE ALSO"

rustc(1), rustdoc(1)

.SH "BUGS"
See <\fBhttps://github.com/rust-lang/cargo/issues\fR> for issues.

.SH "COPYRIGHT"
This work is dual-licensed under Apache 2.0 and MIT terms.  See \fBCOPYRIGHT\fR
file in the cargo source distribution.
