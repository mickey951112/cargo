#compdef cargo

typeset -A opt_args
autoload -U regexp-replace

_cargo() {

_arguments \
    '(- 1 *)'{-h,--help}'[show help message]' \
    '(- 1 *)'--list'[list installed commands]' \
    '(- 1 *)'{-v,--verbose}'[use verbose output]' \
    '(- 1 *)'--color'[colorization option]' \
    '(- 1 *)'{-V,--version}'[show version information]' \
    '1: :_cargo_cmds' \
    '*:: :->args'

case $state in
    args)
        #TODO: add path completion to manifest-path options
        case $words[1] in
            bench)
                _arguments \
                    '--features=[space separated feature list]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-j, --jobs)'{-j,--jobs}'[number of jobs to run in parallel]' \
                    "${command_scope_spec[@]}" \
                    '--manifest-path=[path to manifest]: :_files -/' \
                    '--no-default-features[do not build the default features]' \
                    '--no-run[compile but do not run]' \
                    '(-p,--package)'{-p=,--package=}'[package to run benchmarks for]:packages:_get_package_names' \
                    '--target=[target triple]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '(-q, --quiet)'{-q,--quiet}'[no output printed to stdout]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            build)
                _arguments \
                    '--features=[space separated feature list]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-j, --jobs)'{-j,--jobs}'[number of jobs to run in parallel]' \
                    "${command_scope_spec[@]}" \
                    '--manifest-path=[path to manifest]: :files -/' \
                    '--no-default-features[do not build the default features]' \
                    '(-p,--package)'{-p=,--package=}'[package to build]:packages:_get_package_names' \
                    '--release=[build in release mode]' \
                    '--target=[target triple]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '(-q, --quiet)'{-q,--quiet}'[no output printed to stdout]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            clean)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-p,--package)'{-p=,--package=}'[package to clean]:packages:_get_package_names' \
                    '--target=[target triple(default:all)]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            config-for-key)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--human[]' \
                    '--key=[key]' \
                    ;;

            config-list)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--human[]' \
                    ;;

            doc)
                _arguments \
                    '--features=[space separated feature list]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-j, --jobs)'{-j,--jobs}'[number of jobs to run in parallel]' \
                    '--manifest-path=[path to manifest]' \
                    '--no-deps[do not build docs for dependencies]' \
                    '--no-default-features[do not build the default features]' \
                    '--open[oen docs in browser after the build]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            fetch)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            generate-lockfile)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            git-checkout)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--reference=[REF]' \
                    '--url=[URL]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            help)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '*: :_cargo_cmds' \
                    ;;

            locate-project)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    ;;

            login)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--host=[Host to set the token for]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            new)
                _arguments \
                    '--bin[use binary template]' \
                    '--vcs:initialize a new repo with a given VCS:(git hg none)' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            owner)
                _arguments \
                    '(-a, --add)'{-a,--add}'[add owner LOGIN]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--index[registry index]' \
                    '(-r, --remove)'{-r,--remove}'[remove owner LOGIN]' \
                    '--token[API token]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            package)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '--no-verify[do not build to verify contents]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            pkgid)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            publish)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--host=[Host to set the token for]' \
                    '--manifest-path=[path to manifest]' \
                    '--no-verify[Do not verify tarball until before publish]' \
                    '--token[Token to use when uploading]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            read-manifest)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            run)
                _arguments \
                    '--example=[name of the bin target]' \
                    '--features=[space separated feature list]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-j, --jobs)'{-j,--jobs}'[number of jobs to run in parallel]' \
                    '--manifest-path=[path to manifest]' \
                    '--bin=[name of the bin target]' \
                    '--no-default-features[do not build the default features]' \
                    '--release=[build in release mode]' \
                    '--target=[target triple]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    '*: :_normal' \
                ;;

            test)
                _arguments \
                    '--features=[space separated feature list]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-j, --jobs)'{-j,--jobs}'[number of jobs to run in parallel]' \
                    '--manifest-path=[path to manifest]' \
                    '--test=[test name]: :_test_names' \
                    '--no-default-features[do not build the default features]' \
                    '--no-run[compile but do not run]' \
                    '(-p,--package)'{-p=,--package=}'[package to run tests for]:packages:_get_package_names' \
                    '--target=[target triple]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    '1: :_test_names' \
                    ;;

            update)
                _arguments \
                    '--aggressive=[force dependency update]' \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-p,--package)'{-p=,--package=}'[package to update]:packages:__get_package_names' \
                    '--precise=[update single dependency to PRECISE]: :' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            verify-project)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--manifest-path=[path to manifest]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            version)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    ;;

            yank)
                _arguments \
                    '(-h, --help)'{-h,--help}'[show help message]' \
                    '--index[registry index]' \
                    '--token[API token]' \
                    '--undo[undo yank]' \
                    '(-v, --verbose)'{-v,--verbose}'[use verbose output]' \
                    '--color=:colorization option:(auto always never)' \
                    '--vers[yank version]' \
                    ;;
        esac
        ;;
esac
}

_cargo_cmds(){
local -a commands;commands=(
'bench:execute all benchmarks of a local package'
'build:compile the current project'
'clean:remove generated artifacts'
'config-for-key:print key from cargo config file'
'config-list:print all config from cargo config file'
'doc:build package documentation'
'fetch:fetch package dependencies'
'generate-lockfile:create lockfile'
'git-checkout:git checkout'
'help:get help for commands'
'locate-project:print "Cargo.toml" location'
'login:login to remote server'
'new:create a new project'
'owner:manage the owners of a crate on the registry'
'package:assemble local package into a distributable tarball'
'pkgid:print a fully qualified package specification'
'publish:upload package to the registry'
'read-manifest:print manifest in JSON format'
'run:run the main binary of the local package'
'test:execute all unit and tests of a local package'
'update:update dependencies'
'verify-project:check Cargo.toml'
'version:show version information'
'yank:remove pushed file from index'
)
_describe 'command' commands

}


#FIXME: Disabled until fixed
#gets package names from the manifest file
_get_package_names()
{
}

#TODO:see if it makes sense to have 'locate-project' to have non-json output.
#strips package name from json stuff
_locate_manifest(){
local manifest=`cargo locate-project 2>/dev/null`
regexp-replace manifest '\{"root":"|"\}' ''
echo $manifest
}

# Extracts the values of "name" from the array given in $1 and shows them as
# command line options for completion
_get_names_from_array()
{
    local -a filelist;
    local manifest=$(_locate_manifest)
    if [[ -z $manifest ]]; then
        return 0
    fi

    local last_line
    local -a names;
    local in_block=false
    local block_name=$1
    names=()
    while read line
    do
        if [[ $last_line == "[[$block_name]]" ]]; then
            in_block=true
        else
            if [[ $last_line =~ '.*\[\[.*' ]]; then
                in_block=false
            fi
        fi

        if [[ $in_block == true ]]; then
            if [[ $line =~ '.*name.*=' ]]; then
                regexp-replace line '^.*name *= *|"' ""
                names+=$line
            fi
        fi

        last_line=$line
    done < $manifest
    _describe $block_name names

}

#Gets the test names from the manifest file
_test_names()
{
    _get_names_from_array "test"
}

#Gets the bench names from the manifest file
_benchmark_names()
{
    _get_names_from_array "bench"
}

# These flags are mutally exclusive specifiers for the scope of a command; as
# they are used in multiple places without change, they are expanded into the
# appropriate command's `_arguments` where appropriate.
set command_scope_spec
command_scope_spec=(
    '(--bin --example --test --lib)--bench=[benchmark name]: :_benchmark_names'
    '(--bench --bin --test --lib)--example=[example name]'
    '(--bench --example --test --lib)--bin=[binary name]'
    '(--bench --bin --example --test)--lib=[library name]'
    '(--bench --bin --example --test)--test=[test name]'
)


_cargo
